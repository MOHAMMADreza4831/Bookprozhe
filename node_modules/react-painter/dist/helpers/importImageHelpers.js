"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var objectUrlHelpers_1 = require("./objectUrlHelpers");
var makeAjaxHeadRequest = function (url, withCredentials) {
    if (withCredentials === void 0) { withCredentials = false; }
    return new Promise(function (resolve, reject) {
        try {
            var request_1 = new XMLHttpRequest();
            request_1.open('HEAD', url);
            request_1.timeout = 1000;
            request_1.withCredentials = withCredentials;
            request_1.onreadystatechange = function () {
                if (request_1.readyState === 4) {
                    if (request_1.status === 200) {
                        resolve(request_1.response);
                    }
                    else {
                        reject(request_1.response);
                    }
                }
            };
            request_1.ontimeout = function () {
                reject('Timeout');
            };
            request_1.send();
        }
        catch (e) {
            reject(e);
        }
    });
};
var checkImageCrossOriginAllowed = function (imageUrl) {
    return new Promise(function (resolve) {
        Promise.all(
        // First try without credentials, then with credentials
        // (at the end report which one of the two works - it can be both)
        // Have to map, else Promise.all would fail if any request fail
        [makeAjaxHeadRequest(imageUrl), makeAjaxHeadRequest(imageUrl, true)].map(function (promise) {
            return promise
                .then(function (result) { return ({
                result: result,
                success: true
            }); })
                .catch(function (error) { return ({
                error: error,
                success: false
            }); });
        }))
            .then(function (results) {
            return resolve({
                anonymous: results[0].success,
                withCredentials: results[1].success
            });
        })
            .catch(function () {
            return resolve({
                anonymous: false,
                withCredentials: false
            });
        });
    });
};
var importImageFromUrl = function (url) {
    var img = new Image();
    return new Promise(function (resolve, reject) {
        img.onload = function () {
            resolve({
                img: img,
                imgWidth: img.naturalWidth,
                imgHeight: img.naturalHeight
            });
        };
        checkImageCrossOriginAllowed(url).then(function (_a) {
            var anonymous = _a.anonymous, withCredentials = _a.withCredentials;
            if (anonymous || withCredentials) {
                img.crossOrigin = anonymous ? 'anonymous' : 'use-credentials';
                img.src = url;
            }
            else {
                reject();
            }
        });
    });
};
var importImageFromBitmapSrc = function (bitmapSrc) {
    return new Promise(function (resolve, reject) {
        window
            .createImageBitmap(bitmapSrc)
            .then(function (img) {
            return resolve({
                img: img,
                imgWidth: img.width,
                imgHeight: img.height
            });
        })
            .catch(function (err) { return reject(err); });
    });
};
var importImageFromFile = function (file) {
    var img = new Image();
    return new Promise(function (resolve) {
        img.onload = function () {
            resolve({
                img: img,
                imgWidth: img.naturalWidth,
                imgHeight: img.naturalHeight
            });
        };
        img.src = objectUrlHelpers_1.fileToUrl(file);
    });
};
var importImage = function (image) {
    if (typeof image === 'string') {
        return importImageFromUrl(image);
    }
    else if ('createImageBitMap' in window) {
        return importImageFromBitmapSrc(image);
    }
    else {
        return importImageFromFile(image);
    }
};
exports.importImage = importImage;
//# sourceMappingURL=importImageHelpers.js.map